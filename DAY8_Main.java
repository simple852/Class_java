/**
 * - 프로그래밍 패러다임
 *   절차 지향 프로그래밍 : 프로그램의 순서대로 작성하되, 함수라는 것을 기본으로 프로그래밍
 *                        (모듈 == 함수)
 *                        e.g. C언어, ...
 *   객체 지향 프로그래밍 : 눈에 보이든, 보이지 않든, 개념만 존재한다면, 그것들을 모두 객체로 보고,
 *                        프로그래밍
 *                        (모듈 == 객체)
 *                        e.g. Java, C++, ...
 *   관점 지향 프로그래밍 : 기능의 관점을 기준으로 프로그래밍
 *                        코어 기능 / 크로스 기능으로 나뉨
 *                        코어 : 구현하고자하는 실제 기능을 모듈화(e.g. 인출)
 *                        크로스 : 코어 기능 구현에 필요한 기능을 모듈화(e.g. 로그, 화면 표시 등)
 *                        (모듈 == 관점)
 *                        e.g. 아키텍처 구현 시 패턴 느낌...?
 *   함수형 프로그래밍 : 람다 대수식에서 기반으로 하여, 함수를 람다화해서 프로그래밍
 *                     객체에 함수를 확장으로 추가(원래 상속으로 해야하지만, 확장 기능으로 구현)
 *                     함수를 객체에 전달해서 호출
 *                     (모듈 == 람다 [람다 == 함수])
 *                     e.g. Kotlin, Dart, Swift, Typescript, ...
 *   선언형 프로그래밍 : 람다를 기반으로 하지만, 함수 정의하듯이 프로그래밍
 *                     e.g. 플러터, 컴포즈, 리액트 등 UI 같은 곳에 많이 사용
 */
public class DAY8_Main {
    public static void main(String[] args) {

    }
}
